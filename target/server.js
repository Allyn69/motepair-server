// Generated by CoffeeScript 1.8.0
var Duplex, MessageHandler, backend, connections, livedb, livedbMongo, port, server, share, sharejs, ws;

Duplex = require('stream').Duplex;

livedb = require('livedb');

livedbMongo = require('livedb-mongo');

ws = require('ws');

sharejs = require('share');

MessageHandler = require('./message_handler');

port = process.env.PORT || 3000;

server = new ws.Server({
  port: port
});

backend = livedb.client(livedb.memory());

share = sharejs.server.createClient({
  backend: backend
});

connections = [];

server.on('connection', function(client) {
  var handler, stream;
  connections.push(client);
  stream = new Duplex({
    objectMode: true
  });
  stream._write = function(chunk, encoding, callback) {
    console.log('s->c ', JSON.stringify(chunk));
    if (client.state !== 'closed') {
      client.send(JSON.stringify(chunk));
    }
    return callback();
  };
  stream._read = function() {};
  stream.headers = client.upgradeReq.headers;
  stream.remoteAddress = client.upgradeReq.connection.remoteAddress;
  handler = new MessageHandler(client);
  client.on('message', function(data) {
    data = JSON.parse(data);
    console.log('c->s ', JSON.stringify(data));
    if (data.a === 'meta') {
      return handler.handle(data, connections);
    } else {
      return stream.push(data);
    }
  });
  stream.on('error', function(msg) {
    return client.stop();
  });
  client.on('close', function(reason) {
    var conn;
    console.log('client went away', connections.length);
    stream.push(null);
    stream.emit('close');
    return connections = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = connections.length; _i < _len; _i++) {
        conn = connections[_i];
        if (conn.getId() !== client.getId()) {
          _results.push(conn);
        }
      }
      return _results;
    })();
  });
  stream.on('end', function() {
    return client.close();
  });
  return share.listen(stream);
});

ws.prototype.write = function(event, message) {
  var data;
  data = {
    event: event,
    data: message
  };
  return this.send(JSON.stringify(data));
};

ws.prototype.broadcast = function(event, message) {
  var each, senderId;
  senderId = this.getId();
  console.log(this.sessionId);
  if (this.sessionId !== void 0) {
    return connections[this.sessionId].forEach(each = function(conn) {
      var data, id;
      id = conn.getId();
      if (senderId !== id) {
        data = {
          event: event,
          data: message
        };
        return conn.send(JSON.stringify(data));
      }
    });
  }
};

ws.prototype.getId = function() {
  return this.upgradeReq.headers["sec-websocket-key"];
};
