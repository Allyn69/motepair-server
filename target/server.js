// Generated by CoffeeScript 1.8.0
(function() {
  var Duplex, MessageHandler, app, backend, connections, express, http, livedb, livedbMongo, port, server, share, sharejs, ws, wss;

  require('newrelic');

  MessageHandler = require('./message_handler');

  Duplex = require('stream').Duplex;

  livedb = require('livedb');

  livedbMongo = require('livedb-mongo');

  sharejs = require('share');

  express = require('express');

  http = require('http');

  ws = require('ws');

  port = process.env.PORT || 3000;

  app = express();

  server = http.createServer(app);

  server.listen(port);

  wss = new ws.Server({
    server: server
  });

  backend = livedb.client(livedb.memory());

  share = sharejs.server.createClient({
    backend: backend
  });

  connections = [];

  wss.on('connection', function(client) {
    var handler, stream;
    stream = new Duplex({
      objectMode: true
    });
    stream._write = function(chunk, encoding, callback) {
      console.log('s->c ', JSON.stringify(chunk));
      if (client.state !== 'closed') {
        client.send(JSON.stringify(chunk));
      }
      return callback();
    };
    stream._read = function() {};
    stream.headers = client.upgradeReq.headers;
    stream.remoteAddress = client.upgradeReq.connection.remoteAddress;
    handler = new MessageHandler(client);
    client.on('message', function(data) {
      if (data === 'ping') {
        return;
      }
      data = JSON.parse(data);
      console.log('c->s ', JSON.stringify(data));
      if (data.a === 'meta' && data.type !== 'init') {
        return handler.handle(data, connections[client.sessionId]);
      } else if (data.a === 'meta' && data.type === 'init') {
        return client.createSession(data.sessionId);
      } else {
        return stream.push(data);
      }
    });
    stream.on('error', function(msg) {
      return client.stop();
    });
    client.on('close', function(reason) {
      var conn;
      console.log('client went away', connections.length);
      stream.push(null);
      stream.emit('close');
      return connections[client.sessionId] = (function() {
        var _i, _len, _ref, _results;
        _ref = connections[client.sessionId];
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          conn = _ref[_i];
          if (conn.getId() !== client.getId()) {
            _results.push(conn);
          }
        }
        return _results;
      })();
    });
    stream.on('end', function() {
      return client.close();
    });
    return share.listen(stream);
  });

  ws.prototype.createSession = function(sessionId) {
    if (connections[sessionId] === void 0) {
      connections[sessionId] = [];
    }
    connections[sessionId].push(this);
    return this.sessionId = sessionId;
  };

  ws.prototype.getId = function() {
    return this.upgradeReq.headers["sec-websocket-key"];
  };

}).call(this);
